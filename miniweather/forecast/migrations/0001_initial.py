# Generated by Django 3.1.1 on 2020-10-19 06:48

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('geo', '0004_city_time_zone'),
    ]

    operations = [
        migrations.CreateModel(
            name='ForecastHour',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_time', models.DateTimeField()),
                ('temp_c', models.FloatField()),
                ('temp_f', models.FloatField()),
                ('feelslike_c', models.FloatField()),
                ('feelslike_f', models.FloatField()),
                ('is_day', models.BooleanField()),
                ('condition', models.IntegerField()),
                ('wind_mph', models.FloatField(default=0)),
                ('wind_kph', models.FloatField(default=0)),
                ('wind_degree', models.IntegerField(default=0)),
                ('wind_dir', models.CharField(choices=[('N', 'North'), ('NbE', 'North by east'), ('NNE', 'North-northeast '), ('NEbN', 'Northeast by north'), ('NE', 'Northeast'), ('NEbE', 'Northeast by east'), ('ENE', 'East-northeast'), ('EbN', 'East by north'), ('E', 'East'), ('EbS', 'East by south'), ('ESE', 'East-southeast'), ('SEbE', 'Southeast by east'), ('SE', 'Southeast'), ('SEbS', 'Southeast by south'), ('SSE', 'South-southeast'), ('SbE', 'South by east'), ('S', 'South'), ('SbW', 'South by west'), ('SSW', 'South-southwest'), ('SWbS', 'Southwest by south'), ('SW', 'Southwest'), ('SWbW', 'Southwest by west'), ('WSW', 'West-southwest'), ('WbS', 'West by south'), ('W', 'West'), ('WbN', 'West by north'), ('WNW', 'West-northwest'), ('NWbW', 'Northwest by west'), ('NW', 'Northwest'), ('NWbN', 'Northwest by north'), ('NNW', 'North-northwest'), ('NbW', 'North by west')], max_length=5)),
                ('pressure_mb', models.FloatField(default=0)),
                ('pressure_in', models.FloatField(default=0)),
                ('precip_mm', models.FloatField(default=0)),
                ('precip_in', models.FloatField(default=0)),
                ('humidity', models.IntegerField(default=0)),
                ('cloud', models.BooleanField(default=0)),
                ('windchill_c', models.FloatField(default=0)),
                ('windchill_f', models.FloatField(default=0)),
                ('heatindex_c', models.FloatField(default=0)),
                ('heatindex_f', models.FloatField(default=0)),
                ('dewpoint_c', models.FloatField(default=0)),
                ('dewpoint_f', models.FloatField(default=0)),
                ('vis_km', models.FloatField()),
                ('vis_miles', models.FloatField()),
                ('uv', models.FloatField()),
                ('gust_mph', models.FloatField()),
                ('gust_kph', models.FloatField()),
                ('daily_will_it_rain', models.BooleanField(default=False)),
                ('daily_chance_of_rain', models.IntegerField(default=0)),
                ('daily_will_it_snow', models.BooleanField(default=False)),
                ('daily_chance_of_snow', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='city_forecast_hour', to='geo.city')),
            ],
        ),
        migrations.CreateModel(
            name='ForecastDay',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('maxtemp_c', models.FloatField()),
                ('maxtemp_f', models.FloatField()),
                ('mintemp_c', models.FloatField()),
                ('mintemp_f', models.FloatField()),
                ('avgtemp_c', models.FloatField()),
                ('avgtemp_f', models.FloatField()),
                ('condition', models.IntegerField()),
                ('uv', models.FloatField()),
                ('maxwind_mph', models.FloatField()),
                ('maxwind_kph', models.FloatField()),
                ('totalprecip_mm', models.FloatField()),
                ('totalprecip_in', models.FloatField()),
                ('avgvis_miles', models.FloatField()),
                ('avgvis_km', models.FloatField()),
                ('avghumidity', models.FloatField()),
                ('daily_will_it_rain', models.BooleanField(default=False)),
                ('daily_chance_of_rain', models.IntegerField(default=0)),
                ('daily_will_it_snow', models.BooleanField(default=False)),
                ('daily_chance_of_snow', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='city_forecast_day', to='geo.city')),
            ],
        ),
        migrations.CreateModel(
            name='Current',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_update', models.DateTimeField()),
                ('temp_c', models.FloatField()),
                ('temp_f', models.FloatField()),
                ('feelslike_c', models.FloatField()),
                ('feelslike_f', models.FloatField()),
                ('is_day', models.BooleanField()),
                ('condition', models.IntegerField()),
                ('wind_mph', models.FloatField(default=0)),
                ('wind_kph', models.FloatField(default=0)),
                ('wind_degree', models.IntegerField(default=0)),
                ('wind_dir', models.CharField(choices=[('N', 'North'), ('NbE', 'North by east'), ('NNE', 'North-northeast '), ('NEbN', 'Northeast by north'), ('NE', 'Northeast'), ('NEbE', 'Northeast by east'), ('ENE', 'East-northeast'), ('EbN', 'East by north'), ('E', 'East'), ('EbS', 'East by south'), ('ESE', 'East-southeast'), ('SEbE', 'Southeast by east'), ('SE', 'Southeast'), ('SEbS', 'Southeast by south'), ('SSE', 'South-southeast'), ('SbE', 'South by east'), ('S', 'South'), ('SbW', 'South by west'), ('SSW', 'South-southwest'), ('SWbS', 'Southwest by south'), ('SW', 'Southwest'), ('SWbW', 'Southwest by west'), ('WSW', 'West-southwest'), ('WbS', 'West by south'), ('W', 'West'), ('WbN', 'West by north'), ('WNW', 'West-northwest'), ('NWbW', 'Northwest by west'), ('NW', 'Northwest'), ('NWbN', 'Northwest by north'), ('NNW', 'North-northwest'), ('NbW', 'North by west')], max_length=5)),
                ('pressure_mb', models.FloatField(default=0)),
                ('pressure_in', models.FloatField(default=0)),
                ('precip_mm', models.FloatField(default=0)),
                ('precip_in', models.FloatField(default=0)),
                ('humidity', models.IntegerField(default=0)),
                ('cloud', models.BooleanField(default=0)),
                ('vis_km', models.FloatField()),
                ('vis_miles', models.FloatField()),
                ('uv', models.FloatField()),
                ('gust_mph', models.FloatField()),
                ('gust_kph', models.FloatField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='city_current', to='geo.city')),
            ],
        ),
        migrations.CreateModel(
            name='Astro',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('moon_phase', models.CharField(choices=[('new_moon', 'New Moon'), ('waxing_crescent', 'Waxing Crescent'), ('first_quarter', 'First Quarter'), ('waxing_gibbous', 'Waxing Gibbous'), ('full_moon', 'Full Moon'), ('waning_gibbous', 'Waning Gibbous'), ('last_quarter', 'Last Quarter'), ('waning_crescent', 'Waning Crescent')], max_length=20)),
                ('moon_illumination', models.IntegerField(default=0)),
                ('sunrise', models.TimeField()),
                ('sunset', models.TimeField()),
                ('moonrise', models.TimeField()),
                ('moonset', models.TimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='city_astro', to='geo.city')),
            ],
        ),
    ]
